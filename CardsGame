import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class CardsGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> player1 = readIntegerList(scanner);
        List<Integer> player2 = readIntegerList(scanner);
        String winner = "";
        int sumWinnersHands = 0;
        int deckIndex = 0;

        while (winner.equals("")) {
            int player1Hand = player1.get(deckIndex);
            int player2Hand = player2.get(deckIndex);
            if (player1Hand > player2Hand) {
                winnerTakesDecks(player1, player2, deckIndex, player1Hand, player2Hand);
            } else if (player2Hand > player1Hand){
                winnerTakesDecks(player2, player1, deckIndex, player2Hand, player1Hand);
            } else {
                player1.remove(deckIndex);
                player2.remove(deckIndex);
            }

            if (player1.size() == 0) {
                winner = "player2";
            }
            if (player2.size() == 0) {
                winner = "player1";
            }
        }

        if (winner.equals("player1")) {
            sumWinnersHands = sumCards(player1);
            System.out.println("First player wins! Sum: " + sumWinnersHands);
        } else {
            sumWinnersHands = sumCards(player2);
            System.out.println("Second player wins! Sum: " + sumWinnersHands);
        }
    }

    public static List<Integer> readIntegerList(Scanner scanner) {
        return Arrays.stream(scanner.nextLine().split("\\s+"))
                .map(Integer::parseInt).collect(Collectors.toList());
    }

    private static int sumCards(List<Integer> winner) {
        int sumCards = 0;
        for (int n : winner) {
            sumCards += n;

        }
        return sumCards;
    }

    public static void winnerTakesDecks(List<Integer> handWinner, List<Integer> looser, int deckIndex, int winnerHand, int looserHand) {
        handWinner.add(winnerHand);
        handWinner.add(looserHand);
        looser.remove(deckIndex);
        handWinner.remove(deckIndex);
    }

}
